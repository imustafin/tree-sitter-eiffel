===
Current
===
class A feature x
  do
    f(Current)
  end
end
---
(source_file
  (class_declaration
    (class_name (identifier))
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (internal
                  (routine_mark)
                  (instruction
                    (call
                      (unqualified_call
                        (identifier)
                        (actuals
                          (expression
                            (basic_expression (current))))))))))))))))

===
Void
===
class A feature x
  do
    f(Void)
  end
end
---
(source_file
  (class_declaration
    (class_name (identifier))
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (internal
                  (routine_mark)
                  (instruction
                    (call
                      (unqualified_call
                        (identifier)
                        (actuals
                          (expression
                            (special_expression (void))))))))))))))))

===
Character constant
===
class A feature x
  do
    f('a')
  end
end
---
(source_file
  (class_declaration
    (class_name (identifier))
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (internal
                  (routine_mark)
                  (instruction
                    (call
                      (unqualified_call
                        (identifier)
                        (actuals
                          (expression
                            (special_expression
                              (character_constant (character)))))))))))))))))

===
Basic string
===
class A feature x
  do
    f("Hello, World!")
  end
end
---
(source_file
  (class_declaration
    (class_name (identifier))
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (internal
                  (routine_mark)
                  (instruction
                    (call
                      (unqualified_call
                        (identifier)
                        (actuals
                          (expression
                            (special_expression
                              (manifest_string
                                (basic_manifest_string (string_content))))))))))))))))))

===
Expression. Bracket expression
===
class A
invariant
  f[1]
end
---
(source_file
  (class_declaration (class_name (identifier))
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (basic_expression
              (bracket_expression
                (call (unqualified_call (identifier)))
                (expression (special_expression (integer_constant (integer))))))))))))

===
Expression. Once string
===
class A
invariant
  once "a"
end
---
(source_file
  (class_declaration
    (class_name
      (identifier))
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (once_string
                (manifest_string
                  (basic_manifest_string
                    (string_content)))))))))))

===
Expression. Manifest tuple
===
class A
invariant
  [1, "a"]
end
---
(source_file
  (class_declaration
    (class_name
      (identifier))
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (manifest_tuple
                (expression
                  (special_expression
                    (integer_constant
                      (integer))))
                (expression
                  (special_expression
                    (manifest_string
                      (basic_manifest_string
                        (string_content)))))))))))))

===
Expression. Creation expression
===
class A
invariant
  create {A}.x
end
---
(source_file
  (class_declaration (class_name (identifier))
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (basic_expression
              (creation_expression
                (manifest_type (type (identifier)))
                (unqualified_call (identifier))))))))))

===
Expression. Manifest array
===
class A
invariant
  {A} <<1>>
end
---
(source_file
  (class_declaration (class_name (identifier))
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (manifest_array
                (manifest_type (type (identifier)))
                (expression (special_expression (integer_constant (integer))))))))))))

===
Expression. Call agent
===
class A
invariant
  agent x.f({A}?)
end
---
(source_file
  (class_declaration (class_name (identifier))
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (agent
                (call_agent
                  (agent_target (identifier))
                  (agent_unqualified
                    (identifier)
                    (placeholder (manifest_type (type (identifier))))))))))))))

===
Expression. Inline agent
===
class A
invariant
  agent do end
end
---
(source_file
  (class_declaration
    (class_name
      (identifier))
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (agent
                (inline_agent
                  (attribute_or_routine
                    (feature_body
                      (effective_routine
                        (internal
                          (routine_mark))))))))))))))
