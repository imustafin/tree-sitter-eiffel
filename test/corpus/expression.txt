===
Current
===
class A feature x
  do
    f(Current)
  end
end
---
(source_file
  (class_declaration (class_name)
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (call
                    (unqualified_call
                      (identifier)
                      (actuals
                        (expression
                          (basic_expression (current)))))))))))))))

===
Void
===
class A feature x
  do
    f(Void)
  end
end
---
(source_file
  (class_declaration (class_name)
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (call
                    (unqualified_call
                      (identifier)
                      (actuals
                        (expression
                          (special_expression (void)))))))))))))))

===
Character constant
===
class A feature x
  do
    f('a')
  end
end
---
(source_file
  (class_declaration (class_name)
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (call
                    (unqualified_call
                      (identifier)
                      (actuals
                        (expression
                          (special_expression
                            (character_constant (character))))))))))))))))

===
Expression. Bracket expression
===
class A
invariant
  f[1]
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (basic_expression
              (bracket_expression
                (call (unqualified_call (identifier)))
                (expression (special_expression (integer_constant (integer))))))))))))

===
Expression. Manifest tuple
===
class A
invariant
  [1, "a"]
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (manifest_tuple
                (expression
                  (special_expression
                    (integer_constant
                      (integer))))
                (expression
                  (special_expression
                    (basic_manifest_string
                      (string_content))))))))))))

===
Expression. Creation expression
===
class A
invariant
  create {A}.x
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (basic_expression
              (creation_expression
                (manifest_type (class_type (class_name)))
                (unqualified_call (identifier))))))))))

===
Expression. Manifest array
===
class A
invariant
  {A} <<1>>
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (manifest_array
                (manifest_type (class_type (class_name)))
                (expression (special_expression (integer_constant (integer))))))))))))

===
Expression. Call agent
===
class A
invariant
  agent x.f({A}?)
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (agent
                (call_agent
                  (agent_target (identifier))
                  (agent_unqualified
                    (identifier)
                    (placeholder (manifest_type (class_type (class_name))))))))))))))

===
Expression. Inline agent
===
class A
invariant
  agent do end
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (agent
                (inline_agent
                  (attribute_or_routine
                    (feature_body
                      (effective_routine
                        (internal
                          (routine_mark))))))))))))))

===
Expression. Address
===
class A
invariant
  $a
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (address
                (identifier)))))))))

===
Expression. Object test
===
class A
invariant
attached {X} y as t
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (object_test
                (manifest_type (class_type (class_name)))
                (expression
                  (basic_expression
                    (call (unqualified_call (identifier)))))
                (identifier)))))))))

===
Expression. Tuple type with entities
===
class A
invariant
  {TUPLE [a: INTEGER; b: INTEGER]}
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (manifest_type
                (tuple_type
                  (class_name)
                  (tuple_parameter_list
                    (entity_declaration_list
                      (entity_declaration_group
                        (identifier)
                        (class_type (class_name)))
                      (entity_declaration_group
                        (identifier)
                        (class_type (class_name))))))))))))))

===
Expression. Tuple type with class names
===
class A
invariant
  {TUPLE [A, B]}
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (manifest_type
                (tuple_type
                  (class_name)
                  (tuple_parameter_list
                    (class_type (class_name))
                    (class_type (class_name))))))))))))

===
Expression. Anchored
===
class A
invariant
  {like Current}
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (special_expression
              (manifest_type
                (anchored (current))))))))))
