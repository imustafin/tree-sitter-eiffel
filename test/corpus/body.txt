===
Body. Creation instruction
===
class A feature x
  do
    create {X} x.make
    create x.make(True)
    create Result
  end
end
---
(source_file
  (class_declaration (class_name)
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (creation
                    (manifest_type (class_type (class_name)))
                    (identifier)
                    (unqualified_call (identifier))))
                (instruction
                  (creation
                    (identifier)
                    (unqualified_call
                      (identifier)
                      (actuals
                        (expression (boolean_constant))))))
                (instruction
                  (creation (result)))))))))))

===
Call
===
class A feature x
  do
    a.b
  end
end
---
(source_file
  (class_declaration (class_name)
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (call
                      (call
                        (unqualified_call (identifier)))
                    (unqualified_call (identifier))))))))))))

===
Arguments on next line
===
class A feature x
  do
    a.f
      (True)
  end
end
---
(source_file
  (class_declaration (class_name)
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (call
                    (call (unqualified_call (identifier)))
                    (unqualified_call
                      (identifier)
                      (actuals
                        (expression (boolean_constant))))))))))))))

===
Body. Assigner call
===
class A feature x
  do
    a := True
    a.f := True
  end
end
---
(source_file
  (class_declaration (class_name)
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (assignment
                    (call
                      (unqualified_call (identifier)))
                    (expression (boolean_constant))))
                (instruction
                  (assignment
                    (call
                      (call (unqualified_call (identifier)))
                      (unqualified_call (identifier)))
                    (expression (boolean_constant))))))))))))

===
Body. Assign to Result
===
class A feature x
  do
    Result := 1
  end
end
---
(source_file
  (class_declaration
    (class_name)
    (feature_clause
      (feature_declaration
        (new_feature
          (extended_feature_name
            (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (assignment
                    (result)
                    (expression (integer_constant (integer)))))))))))))

===
Body. Precursor instruction and Precursor expression
===
class A feature x
  do
    Precursor{A}(True)
    a := Precursor
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (precursor
                  (class_name)
                  (actuals
                    (expression (boolean_constant)))))
                (instruction
                  (assignment
                    (call (unqualified_call (identifier)))
                    (expression (precursor))))))))))))

===
Body. Conditional instruction
===
class A feature x
  do
    if a then
      fa
    elseif b then
      fb
    else
      felse
    end
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (conditional
                  (then_part
                    (expression (call (unqualified_call (identifier))))
                    (instruction (call (unqualified_call (identifier)))))
                  (then_part
                    (expression (call (unqualified_call (identifier))))
                    (instruction (call (unqualified_call (identifier)))))
                  (else_part
                    (instruction (call (unqualified_call (identifier)))))))))))))))

===
Body. Conditional expression
===
class A feature x
  do
    a := if a then a elseif b then b else c end
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (assignment
                  (call (unqualified_call (identifier)))
                  (expression
                    (conditional_expression
                      (then_part_expression
                        (expression (call (unqualified_call (identifier))))
                        (expression (call (unqualified_call (identifier)))))
                      (then_part_expression
                        (expression (call (unqualified_call (identifier))))
                        (expression (call (unqualified_call (identifier)))))
                        (expression (call (unqualified_call (identifier))))))))))))))))

===
Body. Multi-branch
===
class A feature x
  do
    inspect a
    when 1 then
    when 1..2 then
    else
    end
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (multi_branch
                  (expression (call (unqualified_call (identifier))))
                  (when_part (choice (integer_constant (integer))))
                  (when_part
                    (choice
                      (constant_interval
                        (integer_constant (integer))
                        (integer_constant (integer)))))
                  (else_part)))))))))))

===
Body. Loop
===
class A feature x
  do
    across
      a as i
    from
    invariant
    until
      e
    loop
    variant
      j
    end
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (loop
                  (iteration
                    (expression
                      (call (unqualified_call (identifier))))
                      (identifier))
                  (initialization)
                  (invariant)
                  (exit_condition
                    (expression (call (unqualified_call (identifier)))))
                  (loop_body)
                  (variant
                    (expression
                      (call (unqualified_call (identifier)))))))))))))))
===
Body. Debug
===
class A feature x
  do
    debug ("a")
    end
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (debug
                  (basic_manifest_string (string_content))))))))))))

===
Body. Check
===
class A feature x
  do
    check a b end
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (check
                  (assertion_clause
                    (unlabeled_assertion_clause
                      (expression
                        (call (unqualified_call (identifier))))))
                  (assertion_clause
                    (unlabeled_assertion_clause
                      (expression
                        (call (unqualified_call (identifier))))))))))))))))

===
Body. Retry
===
class A feature x
  do
    retry
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (retry))))))))))

===
Body. Equality
===
class A feature x
  do
    a := 1 = 2
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (assignment
                  (call (unqualified_call (identifier)))
                  (expression
                    (equality
                      (expression (integer_constant (integer)))
                      (comparison)
                      (expression (integer_constant (integer)))))))))))))))

===
Body. Parenthesized
===
class A feature x
  do
    a := (1)
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body
          (effective_routine
            (internal
              (routine_mark)
              (instruction
                (assignment
                  (call (unqualified_call (identifier)))
                  (expression
                    (parenthesized
                      (expression
                        (integer_constant (integer)))))))))))))))

===
Body. Old
===
class A feature x
  deferred
  ensure
    old x
  end
end
---
(source_file
  (class_declaration (class_name)
  (feature_clause
    (feature_declaration
      (new_feature (extended_feature_name (identifier)))
      (attribute_or_routine
        (feature_body)
        (postcondition
          (assertion_clause
            (unlabeled_assertion_clause
              (expression
                (old
                  (expression
                    (call
                      (unqualified_call (identifier))))))))))))))

===
Body. Operator expressions
===
class A
invariant
  1 + -2
end
---
(source_file
  (class_declaration (class_name)
    (invariant
      (assertion_clause
        (unlabeled_assertion_clause
          (expression
            (operator_expression
              (expression (integer_constant (integer)))
              (binary_plus_minus)
              (expression
                (operator_expression
                  (unary (unary_plus_minus))
                  (expression (integer_constant (integer))))))))))))

===
Body. Non-object call
===
class A feature x
  do
    {A}.f
  end
end
---
(source_file
  (class_declaration (class_name)
    (feature_clause
      (feature_declaration
        (new_feature
          (extended_feature_name
            (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (call
                    (manifest_type (class_type (class_name)))
                    (unqualified_call
                      (identifier))))))))))))
