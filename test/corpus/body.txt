===
Creation instruction
===
class A feature x
  do
    create {X} x.make
    create x.make(True)
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (internal
                  (routine_mark)
                  (instruction
                    (creation
                      (manifest_type (type (identifier)))
                      (creation_call
                        (identifier)
                        (unqualified_call (identifier)))))
                  (instruction
                    (creation
                      (creation_call
                        (identifier)
                        (unqualified_call
                          (identifier)
                          (actuals
                            (expression
                              (special_expression
                                (boolean_constant)))))))))))))))))

===
Call
===
class A feature x
  do
    a.b
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (internal
                  (routine_mark)
                  (instruction
                    (call
                        (call
                          (unqualified_call (identifier)))
                      (unqualified_call (identifier)))))))))))))

===
Arguments on next line
===
class A feature x
  do
    a.f
      (True)
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (internal
                  (routine_mark)
                  (instruction
                    (call
                      (call (unqualified_call (identifier)))
                      (unqualified_call
                        (identifier)
                        (actuals
                          (expression
                            (special_expression
                              (boolean_constant))))))))))))))))

===
Body. Assigner call
===
class A feature x
  do
    a := True
    a.f := True
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (internal
                  (routine_mark)
                  (instruction
                    (assigner_call
                      (call
                        (unqualified_call (identifier)))
                      (expression
                        (special_expression (boolean_constant)))))
                  (instruction
                    (assigner_call
                      (call
                        (call (unqualified_call (identifier)))
                        (unqualified_call (identifier)))
                      (expression
                        (special_expression (boolean_constant))))))))))))))

===
Body. Precursor instruction and Precursor expression
===
class A feature x
  do
    Precursor{A}(True)
    a := Precursor
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (precursor
                    (class_name (identifier))
                    (actuals
                      (expression
                        (special_expression
                          (boolean_constant))))))
                 (instruction
                   (assigner_call
                     (call (unqualified_call (identifier)))
                     (expression (basic_expression (precursor))))))))))))))

===
Body. Conditional instruction
===
class A feature x
  do
    if a then
      fa
    elseif b then
      fb
    else
      felse
    end
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (conditional
                    (then_part
                      (expression (basic_expression (call (unqualified_call (identifier)))))
                      (instruction (call (unqualified_call (identifier)))))
                    (then_part
                      (expression (basic_expression (call (unqualified_call (identifier)))))
                      (instruction (call (unqualified_call (identifier)))))
                    (else_part
                      (instruction (call (unqualified_call (identifier))))))))))))))))

===
Body. Conditional expression
===
class A feature x
  do
    a := if a then a elseif b then b else c end
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (assigner_call
                    (call (unqualified_call (identifier)))
                    (expression
                      (basic_expression
                        (conditional_expression
                          (then_part_expression
                            (expression (basic_expression (call (unqualified_call (identifier)))))
                            (expression (basic_expression (call (unqualified_call (identifier))))))
                          (then_part_expression
                            (expression (basic_expression (call (unqualified_call (identifier)))))
                            (expression (basic_expression (call (unqualified_call (identifier))))))
                            (expression (basic_expression (call (unqualified_call (identifier)))))))))))))))))))

===
Body. Multi-branch
===
class A feature x
  do
    inspect a
    when 1 then
    when 1..2 then
    else
    end
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (multi_branch
                    (expression (basic_expression (call (unqualified_call (identifier)))))
                    (when_part (choice (integer_constant (integer))))
                    (when_part
                      (choice
                        (constant_interval
                          (integer_constant (integer))
                          (integer_constant (integer)))))
                    (else_part))))))))))))

===
Body. Loop
===
class A feature x
  do
    across
      a as i
    from
    invariant
    until
      e
    loop
    variant
      j
    end
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (loop
                    (iteration
                      (expression
                        (basic_expression (call (unqualified_call (identifier)))))
                        (identifier))
                    (initialization)
                    (invariant)
                    (exit_condition
                      (expression (basic_expression (call (unqualified_call (identifier))))))
                    (loop_body)
                    (variant
                      (expression
                        (basic_expression
                          (call (unqualified_call (identifier)))))))))))))))))
===
Body. Debug
===
class A feature x
  do
    debug ("a")
    end
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (debug
                    (manifest_string (basic_manifest_string (string_content))))))))))))))

===
Body. Check
===
class A feature x
  do
    check a b end
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (check
                    (assertion_clause
                      (unlabeled_assertion_clause
                        (expression
                          (basic_expression (call (unqualified_call (identifier)))))))
                    (assertion_clause
                      (unlabeled_assertion_clause
                        (expression
                          (basic_expression (call (unqualified_call (identifier))))))))))))))))))

===
Body. Retry
===
class A feature x
  do
    retry
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (retry)))))))))))

===
Body. Equality
===
class A feature x
  do
    a := 1 = 2
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (assigner_call
                    (call (unqualified_call (identifier)))
                    (expression
                      (basic_expression
                        (equality
                          (expression (special_expression (integer_constant (integer))))
                          (comparison)
                          (expression (special_expression (integer_constant (integer))))))))))))))))))

===
Body. Parenthesized
===
class A feature x
  do
    a := (1)
  end
end
---
(source_file
  (class_declaration (class_name (identifier))
  (features
    (feature_clause
      (feature_declaration
        (new_feature (extended_feature_name (identifier)))
        (attribute_or_routine
          (feature_body
            (effective_routine
              (internal
                (routine_mark)
                (instruction
                  (assigner_call
                    (call (unqualified_call (identifier)))
                    (expression
                      (basic_expression
                        (parenthesized
                          (expression
                            (special_expression
                              (integer_constant (integer))))))))))))))))))
