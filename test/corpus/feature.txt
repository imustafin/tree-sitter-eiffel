===
Feature blocks
===
class A
feature
feature
end
---
(source_file
  (class_declaration (class_name)
    features: (features
        (feature_clause)
        (feature_clause))))

===
Feature field
===
class A
feature
  x: INTEGER
end
---
(source_file
  (class_declaration (class_name)
    features: (features
      (feature_clause
        declarations: (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (class_type (class_name)))))))

===
Feature arguments
===
class A
feature
f(x, y: INTEGER; z: BOOLEAN)
end
---
(source_file
  (class_declaration (class_name)
    features: (features
      (feature_clause
        declarations: (feature_declaration
            (new_feature (extended_feature_name (identifier)))
            arguments: (formal_arguments
              (entity_declaration_list
                (entity_declaration_group
                  identifiers: (identifier_list (identifier) (identifier))
                  (class_type (class_name)))
                (entity_declaration_group
                  identifiers: (identifier_list (identifier))
                  (class_type (class_name))))))))))

===
Clients
===
class A
feature {NONE, ANY, A, B}
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (clients (identifier) (identifier) (identifier) (identifier))))))

===
Feature header comment
===
class A
feature
  -- Header comment
  -- continuation

  -- Normal comment
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (header_comment)))
    (comment)))

===
Feature declaration header comment
===
class A
feature
  x: INTEGER
    -- Header comment
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (class_type (class_name))
          (header_comment))))))

===
Obsolete
===
class A
feature
  x
    obsolete "msg"
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (obsolete
            (basic_manifest_string (string_content))))))))

===
Feature. Frozen
===
class A
feature
  frozen a: INTEGER
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature
            (frozen)
            (extended_feature_name (identifier)))
          (class_type (class_name)))))))

===
Feature. Explicit value
===
class A
feature
  x: INTEGER = 1
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (class_type (class_name))
          (explicit_value (integer_constant (integer))))))))

===
Feature. Precondition
===
class A feature
  x
    require
      True
    do
    end

  y
    require else
    do
    end
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (precondition
              (assertion_clause
                (unlabeled_assertion_clause
                  (expression
                    (special_expression (boolean_constant))))))
            (feature_body (effective_routine (internal (routine_mark))))))
         (feature_declaration
           (new_feature (extended_feature_name (identifier)))
           (attribute_or_routine
             (precondition)
             (feature_body (effective_routine (internal (routine_mark))))))))))

===
Feature. Locals
===
class A feature
  x
    local
      a: INTEGER
      b: STRING
    do
    end
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (local_declarations
              (entity_declaration_list
                (entity_declaration_group
                  (identifier_list (identifier))
                  (class_type (class_name)))
                (entity_declaration_group
                  (identifier_list (identifier))
                  (class_type (class_name)))))
            (feature_body
              (effective_routine (internal (routine_mark))))))))))

===
Feature. Postcondition
===
class A feature
  x
    do
    ensure then
      True
    end
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body (effective_routine (internal (routine_mark))))
            (postcondition
              (assertion_clause
                (unlabeled_assertion_clause
                  (expression
                    (special_expression (boolean_constant))))))))))))

===
Feature. Rescue
===
class A feature
  x
    do
    rescue
      x := False
    end
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body (effective_routine (internal (routine_mark))))
            (rescue
              (instruction
                (assignment
                  (call (unqualified_call (identifier)))
                  (expression
                    (special_expression (boolean_constant))))))))))))

===
Feature. Attribute
===
class A feature
  x: INTEGER
    attribute
    end
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (class_type (class_name))
          (attribute_or_routine
            (feature_body
              (attribute))))))))

===
Feature. External
===
class A feature
  x
    external
      "C"
    alias
      "c_function"
    end
end
---
(source_file
  (class_declaration (class_name)
    (features
      (feature_clause
        (feature_declaration
          (new_feature (extended_feature_name (identifier)))
          (attribute_or_routine
            (feature_body
              (effective_routine
                (external
                  (basic_manifest_string (string_content))
                  (basic_manifest_string (string_content)))))))))))
